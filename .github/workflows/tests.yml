name: JFrog CLI Tests
on:
  push:
  # Triggers the workflow on labeled PRs only.
  pull_request_target:
    types: [labeled]
# Ensures that only the latest commit is running for each PR at a time.
# Ignores this rule for push events.
concurrency:
  group: ${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true
jobs:
  CLI-Tests:
    if: contains(github.event.pull_request.labels.*.name, 'safe to test') || github.event_name == 'push'
    name: ${{ matrix.suite }} (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        suite:
          [
            artifactory,
            artifactoryProject,
            pip,
            pipenv,
            distribution,
            xray,
            plugins,
            npm,
            maven,
            gradle,
            nuget,
            go,
          ]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      GRADLE_OPTS: -Dorg.gradle.daemon=false
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - run: git config --global --add url."git@github.com:".insteadOf "https://github.com/"

      - name: Setup Artifactory
        run: |
          go install github.com/jfrog/jfrog-testing-infra/local-rt-setup@latest
          ~/go/bin/local-rt-setup
        env:
          RTLIC: ${{secrets.RTLIC}}
          GOPROXY: direct
        if: ${{ matrix.suite != 'distribution' && matrix.suite != 'xray' }}

      - name: Install npm
        uses: actions/setup-node@v2
        with:
          node-version: "16"
        if: ${{ matrix.suite == 'npm' || matrix.suite == 'xray' }}

      - name: Install Java
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"
        if: ${{ matrix.suite == 'maven' || matrix.suite == 'gradle' || matrix.suite == 'xray' }}

      - name: Install NuGet
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: 5.x
        if: ${{ matrix.suite == 'nuget' }}

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
        if: ${{ matrix.suite == 'pip' || matrix.suite == 'pipenv' ||  matrix.suite == 'xray' }}

      - name: Setup Pipenv
        if: ${{ matrix.suite == 'pipenv' || matrix.suite == 'xray' }}
        run: pip install pipenv

      - name: Run go vet
        run: go vet -v ./...

      - name: Run Artifactory / Build tools tests
        run: go test -v github.com/jfrog/jfrog-cli --timeout 0 --test.${{ matrix.suite }}=true --ci.runId=${{ runner.os }}-${{ matrix.suite }}
        if: ${{ matrix.suite != 'distribution' && matrix.suite != 'xray' }}

      - name: Run Distribution / Xray tests
        run: go test -v github.com/jfrog/jfrog-cli --timeout 0 --test.${{ matrix.suite }}=true --jfrog.url=${{ secrets.PLATFORM_URL }} --jfrog.adminToken=${{ secrets.PLATFORM_ADMIN_TOKEN }} --jfrog.user=${{ secrets.PLATFORM_USER }} --ci.runId=${{ runner.os }}-${{ matrix.suite }}
        if: ${{ matrix.suite == 'distribution' || matrix.suite == 'xray' }}

  Docker-tests:
    if: contains(github.event.pull_request.labels.*.name, 'safe to test') || github.event_name == 'push'
    name: docker (ubuntu-latest)
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Run Docker tests
        run: go test -v -timeout 0 --test.docker=true --jfrog.url=${{ secrets.PLATFORM_URL }} --jfrog.adminToken=${{ secrets.PLATFORM_ADMIN_TOKEN }} --rt.dockerRepoDomain=${{ secrets.CONTAINER_REGISTRY }} --rt.dockerVirtualRepo=${{ secrets.DOCKER_VIRTUAL }} --rt.dockerLocalRepo=${{ secrets.DOCKER_LOCAL }} --rt.dockerRemoteRepo=${{ secrets.DOCKER_REMOTE }} --rt.dockerPromoteLocalRepo=${{ secrets.DOCKER_PROMOTE_LOCAL }}

  Scripts-tests:
    name: scripts (${{ matrix.os }})
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Test install CLI - jf
        run: sh build/installcli/jf.sh && jf --version
      - name: Test install CLI - jfrog
        run: sh build/installcli/jfrog.sh && jfrog --version
      - name: Test get CLI - jf
        run: sh build/getcli/jf.sh && ./jf --version
      - name: Test get CLI - jfrog
        run: sh build/getcli/jfrog.sh && ./jfrog --version
