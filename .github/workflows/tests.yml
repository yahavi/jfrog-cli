name: JFrog CLI Tests
on:
  push:
  # Triggers the workflow on labeled PRs only.
  pull_request_target:
    types: [ labeled ]
jobs:
  Go-Lint:
    if: contains(github.event.pull_request.labels.*.name, 'safe to test') || github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Run Go vet
        run: go vet -v ./...

  CLI-Tests:
    if: contains(github.event.pull_request.labels.*.name, 'safe to test') || github.event_name == 'push'
    name: ${{ matrix.suite }} (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        suite:
          [
            artifactory,
            pip,
            distribution,
            plugins,
            npm,
            nuget,
            maven,
            gradle,
            go,
          ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    env:
      GRADLE_OPTS: -Dorg.gradle.daemon=false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Install npm
        uses: actions/setup-node@v3
        with:
          node-version: "16"
        if: ${{ matrix.suite == 'npm' }}

      - name: Install Java
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "adopt"
        if: ${{ matrix.suite == 'maven' || matrix.suite == 'gradle' }}

      - name: Install NuGet
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: 5.x
        if: ${{ matrix.suite == 'nuget' }}

      - name: Install dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '3.x'
        if: ${{ matrix.suite == 'nuget' }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
        if: ${{ matrix.suite == 'pip' }}

      - name: Setup Python virtual environment
        if: ${{ matrix.suite == 'pip' }}
        run: pip install virtualenv && virtualenv venv

      - name: Activate Python virtual env on Windows
        if: ${{ matrix.suite == 'pip' && runner.os == 'Windows' }}
        run: . venv\Scripts\activate.ps1

      - name: Activate Python virtual env on Posix
        if: ${{ matrix.suite == 'pip' && (runner.os == 'macOS' || runner.os == 'Linux') }}
        run: source venv/bin/activate

      - name: Run tests
        run: go test -v github.com/jfrog/jfrog-cli --timeout 0 --test.${{ matrix.suite }}=true --rt.url=${{ secrets.PLATFORM_URL }}/artifactory --access.url=${{ secrets.PLATFORM_URL }}/access --rt.distUrl=${{ secrets.PLATFORM_URL }}/distribution --rt.user=${{ secrets.PLATFORM_USER }} --rt.accessToken=${{ secrets.PLATFORM_ADMIN_TOKEN }} --ci.runId=${{ runner.os }}-${{ matrix.suite }}

  Docker-tests:
    if: contains(github.event.pull_request.labels.*.name, 'safe to test') || github.event_name == 'push'
    name: docker (ubuntu-latest)
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Run Docker tests
        run: go test -v -timeout 0 --test.docker=true --rt.url=${{ secrets.PLATFORM_URL }}/artifactory --rt.accessToken=${{ secrets.PLATFORM_ADMIN_TOKEN }} --rt.dockerRepoDomain=ecosysjfrog-docker-virtual.jfrog.io --rt.dockerVirtualRepo=docker-virtual --rt.DockerLocalRepo=docker-local --rt.dockerRemoteRepo=docker-remote
